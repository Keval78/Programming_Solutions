/****  HashSet  *****/
HashSet<String> h = new HashSet<String>();
h.add("India");
add(E e)    clear()    clone()    contains(Object o)    isEmpty()   
iterator()    remove(Object o)    size()  spliterator()



/****  HashMap  *****/
map.containsKey(key);
for (String key : map.keySet())
HashMap<Integer, Integer> var = new HashMap<Integer, Integer>();
var.containsKey(key);
var.put(key, val);
var.get();




/*****  2D ArrayList  *****/
ArrayList<ArrayList<Integer>> vals = new ArrayList<>(21);
for(int i=0;i<21;i++){
    vals.add(new ArrayList());
}
vals.get(j).add(val);
vals.get(j).get(val);


min/max value. => Math.min/max(val1, val2)


/******  Fast Scanner  ******/
InputStream inputStream = new FileInputStream("/Users/jeetu/Desktop/Programming/input.txt");//System.in;
OutputStream outputStream = new FileOutputStream("/Users/jeetu/Desktop/Programming/output.txt"); //System.out;
ScanReader in = new ScanReader(inputStream);
PrintWriter out = new PrintWriter(outputStream);
static class ScanReader {
    private byte[] buf = new byte[4 * 1024];
    private int index;
    private BufferedInputStream in;
    private int total;

    public ScanReader(InputStream inputStream) {
        in = new BufferedInputStream(inputStream);
    }

    private int scan() {
        if (index >= total) {
            index = 0;
            try {
                total = in.read(buf);
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (total <= 0) return -1;
        }
        return buf[index++];
    }

    public int scanInt() {
        int integer = 0;
        int n = scan();
        while (isWhiteSpace(n)) n = scan();
        int neg = 1;
        if (n == '-') {
            neg = -1;
            n = scan();
        }
        while (!isWhiteSpace(n)) {
            if (n >= '0' && n <= '9') {
                integer *= 10;
                integer += n - '0';
                n = scan();
            }
        }
        return neg * integer;
    }

    private boolean isWhiteSpace(int n) {
        if (n == ' ' || n == '\n' || n == '\r' || n == '\t' || n == -1) return true;
        else return false;
    }

}