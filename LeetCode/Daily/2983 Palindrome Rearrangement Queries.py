'''
###### * User Profile : Keval_78 
LinkedIn: https://www.linkedin.com/in/kevalpadsala78/
Github: https://github.com/Keval78
Leetcode: https://leetcode.com/Keval_78/
'''

from typing import List

class Solution:
    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        n = len(s)

        # Freq for Substring match in Constant Time.
        freq = [[0]*26]
        for ch in s:
            t = freq[-1].copy()
            t[ord(ch)-97] += 1
            freq.append(t)

        # for f in freq: print(f)

        # Equal for Substring match in Constant Time.
        equal = [0]
        for i in range(n//2):
            equal.append(equal[-1] + (1 if s[i] == s[n-i-1] else 0))

        # Base case If Freq(s[0:n//2]) != Freq(s[n//2:n]) return all False.
        # if next(((j-i != l-k) for i, j, k, l in zip(freq[n//2], freq[n], freq[0], freq[n//2]) if j-i != l-k), False):
        #     return [False]*len(queries)
        
        res = []
        for i, j, k, l in queries:
            if not (i <= j <= k <= l): continue
            k_dash, l_dash = n-l-1, n-k-1
            # print(i, j, k, l, k_dash, l_dash)
            # Overlapping case:
            if i <= k_dash <= j or k_dash <= i <= l_dash:
                # print("Overlapping")
                idxs = [i, j, k_dash, l_dash]
                idxs.sort()
                # print(idxs)
                x, y, w, z = idxs
                exact_idx = [(0, x), (x, y), (y, w+1), (w+1, z+1), (z+1, n//2)]
                # print(exact_idx)
                
                # Frist and Last exact String match:
                x, y = exact_idx[0]
                # print(x, y)
                if x != y and (y-x-1)!=(equal[y]-equal[x+1]):
                    res.append(False)
                    continue
                
                x, y = exact_idx[-1]
                # print(x, y)
                if x != y and (y-x-1)!=(equal[y]-equal[x+1]):
                    res.append(False)
                    continue
                
                # print("Frist & Last matched")
                f1 = [(y-x) for x, y in zip(freq[i], freq[j+1])]
                f2 = [(y-x) for x, y in zip(freq[k], freq[l+1])]
                # print(f1, f2)
                
                # Second and Fourth case substract freqs.
                x, y = exact_idx[1]
                # print(x, y)
                if x!=y:
                    if x in range(i, j+1):
                        f1 = [p-(r-q) for p, q, r in zip(f1, freq[n-y], freq[n-x])]
                        # print(f1)
                        # print([r-q for q, r in zip(freq[n-y], freq[n-x])])
                    else:
                        f2 = [p-(r-q) for p, q, r in zip(f2, freq[x], freq[y])]
                        # print(f2, [r-q for q, r in zip(freq[x], freq[y])])
                
                x, y = exact_idx[3]
                if x!=y:
                    if y-1 in range(i, j+1):
                        f1 = [p-(r-q) for p, q, r in zip(f1, freq[n-y], freq[n-x])]
                        # print(f1, [r-q for q, r in zip(freq[x], freq[y])])
                    else:
                        f2 = [p-(r-q) for p, q, r in zip(f2, freq[x], freq[y])]
                        # print(f2, [r-q for q, r in zip(freq[x], freq[y])])

                # print(f1)
                # print(f2)
                m = next((False for p, q in zip(f1, f2) if p!=q or p<0), True)
                if not m:
                    res.append(False)
                    # print("3")
                    continue
                
            else: # Non overlapping case:
                # Match freq [i:j] -> [n-j-1:n-i-1]
                m1 = next(((j-i == l-k) for i, j, k, l in zip(freq[i], freq[j+1], freq[n-j-1], freq[n-i]) if j-i != l-k), True)

                # Match freq [k:l] -> [n-l-1:n-k-1]
                m2 = next(((j-i == l-k) for i, j, k, l in zip(freq[k], freq[l+1], freq[n-l-1], freq[n-k]) if j-i != l-k), True)

                # if m1 != (Counter(s[i:j+1])==Counter(s[n-j-1:n-i])) or m2 != (Counter(s[k:l+1])==Counter(s[n-l-1:n-k])):
                #     print("Error", m1, Counter(s[i:j+1]), Counter(s[n-j-1:n-i]), m2, Counter(s[k:l+1]), Counter(s[n-l-1:n-k]))
                
                # Substring Freq do not match
                if not(m1 and m2): 
                    res.append(False)
                    # print("4")
                    continue
                
                # print("freq match", i, j, k, l, k_dash, l_dash)
                if i < k_dash:
                    exact_idx = [(0, i), (j, k_dash), (l_dash, n//2)]
                else:
                    exact_idx = [(0, k_dash), (l_dash, i), (j, n//2)]
                
                # print(exact_idx)
                # for x, y in exact_idx:
                #     if x!=y:
                #         print(equal[y], equal[x+1], (y-x-1)==(equal[y]-equal[x+1]))
                sub_equal = next((False for x, y in exact_idx if x!=y and (y-x-1)!=(equal[y]-equal[x+1])), True)
                if not sub_equal:
                    res.append(False)
                    # print("5")
                    continue
                
                # print(i, j, k, l, k_dash, l_dash)
            
            res.append(True)
        return res
        




# s = "abcabc"
# queries = [[1,1,3,5],[0,2,5,5]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)

# s = "abbcdecbba"
# queries = [[0,2,7,9]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)


# s = "acbcab"
# queries = [[1,2,4,5]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)

# s = "abbdcdcbba"
# queries = [[0, 0, 5, 5], [0, 0, 5, 6], [0, 0, 5, 7], [0, 0, 5, 8], [0, 0, 5, 9], [0, 0, 6, 5], [0, 0, 6, 6], [0, 0, 6, 7], [0, 0, 6, 8], [0, 0, 6, 9], [0, 0, 7, 5], [0, 0, 7, 6], [0, 0, 7, 7], [0, 0, 7, 8], [0, 0, 7, 9], [0, 0, 8, 5], [0, 0, 8, 6], [0, 0, 8, 7], [0, 0, 8, 8], [0, 0, 8, 9], [0, 0, 9, 5], [0, 0, 9, 6], [0, 0, 9, 7], [0, 0, 9, 8], [0, 0, 9, 9], [0, 1, 5, 5], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 5, 8], [0, 1, 5, 9], [0, 1, 6, 5], [0, 1, 6, 6], [0, 1, 6, 7], [0, 1, 6, 8], [0, 1, 6, 9], [0, 1, 7, 5], [0, 1, 7, 6], [0, 1, 7, 7], [0, 1, 7, 8], [0, 1, 7, 9], [0, 1, 8, 5], [0, 1, 8, 6], [0, 1, 8, 7], [0, 1, 8, 8], [0, 1, 8, 9], [0, 1, 9, 5], [0, 1, 9, 6], [0, 1, 9, 7], [0, 1, 9, 8], [0, 1, 9, 9], [0, 2, 5, 5], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 5, 8], [0, 2, 5, 9], [0, 2, 6, 5], [0, 2, 6, 6], [0, 2, 6, 7], [0, 2, 6, 8], [0, 2, 6, 9], [0, 2, 7, 5], [0, 2, 7, 6], [0, 2, 7, 7], [0, 2, 7, 8], [0, 2, 7, 9], [0, 2, 8, 5], [0, 2, 8, 6], [0, 2, 8, 7], [0, 2, 8, 8], [0, 2, 8, 9], [0, 2, 9, 5], [0, 2, 9, 6], [0, 2, 9, 7], [0, 2, 9, 8], [0, 2, 9, 9], [0, 3, 5, 5], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 5, 8], [0, 3, 5, 9], [0, 3, 6, 5], [0, 3, 6, 6], [0, 3, 6, 7], [0, 3, 6, 8], [0, 3, 6, 9], [0, 3, 7, 5], [0, 3, 7, 6], [0, 3, 7, 7], [0, 3, 7, 8], [0, 3, 7, 9], [0, 3, 8, 5], [0, 3, 8, 6], [0, 3, 8, 7], [0, 3, 8, 8], [0, 3, 8, 9], [0, 3, 9, 5], [0, 3, 9, 6], [0, 3, 9, 7], [0, 3, 9, 8], [0, 3, 9, 9], [0, 4, 5, 5], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 5, 8], [0, 4, 5, 9], [0, 4, 6, 5], [0, 4, 6, 6], [0, 4, 6, 7], [0, 4, 6, 8], [0, 4, 6, 9], [0, 4, 7, 5], [0, 4, 7, 6], [0, 4, 7, 7], [0, 4, 7, 8], [0, 4, 7, 9], [0, 4, 8, 5], [0, 4, 8, 6], [0, 4, 8, 7], [0, 4, 8, 8], [0, 4, 8, 9], [0, 4, 9, 5], [0, 4, 9, 6], [0, 4, 9, 7], [0, 4, 9, 8], [0, 4, 9, 9], [1, 0, 5, 5], [1, 0, 5, 6], [1, 0, 5, 7], [1, 0, 5, 8], [1, 0, 5, 9], [1, 0, 6, 5], [1, 0, 6, 6], [1, 0, 6, 7], [1, 0, 6, 8], [1, 0, 6, 9], [1, 0, 7, 5], [1, 0, 7, 6], [1, 0, 7, 7], [1, 0, 7, 8], [1, 0, 7, 9], [1, 0, 8, 5], [1, 0, 8, 6], [1, 0, 8, 7], [1, 0, 8, 8], [1, 0, 8, 9], [1, 0, 9, 5], [1, 0, 9, 6], [1, 0, 9, 7], [1, 0, 9, 8], [1, 0, 9, 9], [1, 1, 5, 5], [1, 1, 5, 6], [1, 1, 5, 7], [1, 1, 5, 8], [1, 1, 5, 9], [1, 1, 6, 5], [1, 1, 6, 6], [1, 1, 6, 7], [1, 1, 6, 8], [1, 1, 6, 9], [1, 1, 7, 5], [1, 1, 7, 6], [1, 1, 7, 7], [1, 1, 7, 8], [1, 1, 7, 9], [1, 1, 8, 5], [1, 1, 8, 6], [1, 1, 8, 7], [1, 1, 8, 8], [1, 1, 8, 9], [1, 1, 9, 5], [1, 1, 9, 6], [1, 1, 9, 7], [1, 1, 9, 8], [1, 1, 9, 9], [1, 2, 5, 5], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 5, 9], [1, 2, 6, 5], [1, 2, 6, 6], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 6, 9], [1, 2, 7, 5], [1, 2, 7, 6], [1, 2, 7, 7], [1, 2, 7, 8], [1, 2, 7, 9], [1, 2, 8, 5], [1, 2, 8, 6], [1, 2, 8, 7], [1, 2, 8, 8], [1, 2, 8, 9], [1, 2, 9, 5], [1, 2, 9, 6], [1, 2, 9, 7], [1, 2, 9, 8], [1, 2, 9, 9], [1, 3, 5, 5], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 5, 9], [1, 3, 6, 5], [1, 3, 6, 6], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 6, 9], [1, 3, 7, 5], [1, 3, 7, 6], [1, 3, 7, 7], [1, 3, 7, 8], [1, 3, 7, 9], [1, 3, 8, 5], [1, 3, 8, 6], [1, 3, 8, 7], [1, 3, 8, 8], [1, 3, 8, 9], [1, 3, 9, 5], [1, 3, 9, 6], [1, 3, 9, 7], [1, 3, 9, 8], [1, 3, 9, 9], [1, 4, 5, 5], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 5, 9], [1, 4, 6, 5], [1, 4, 6, 6], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 6, 9], [1, 4, 7, 5], [1, 4, 7, 6], [1, 4, 7, 7], [1, 4, 7, 8], [1, 4, 7, 9], [1, 4, 8, 5], [1, 4, 8, 6], [1, 4, 8, 7], [1, 4, 8, 8], [1, 4, 8, 9], [1, 4, 9, 5], [1, 4, 9, 6], [1, 4, 9, 7], [1, 4, 9, 8], [1, 4, 9, 9], [2, 0, 5, 5], [2, 0, 5, 6], [2, 0, 5, 7], [2, 0, 5, 8], [2, 0, 5, 9], [2, 0, 6, 5], [2, 0, 6, 6], [2, 0, 6, 7], [2, 0, 6, 8], [2, 0, 6, 9], [2, 0, 7, 5], [2, 0, 7, 6], [2, 0, 7, 7], [2, 0, 7, 8], [2, 0, 7, 9], [2, 0, 8, 5], [2, 0, 8, 6], [2, 0, 8, 7], [2, 0, 8, 8], [2, 0, 8, 9], [2, 0, 9, 5], [2, 0, 9, 6], [2, 0, 9, 7], [2, 0, 9, 8], [2, 0, 9, 9], [2, 1, 5, 5], [2, 1, 5, 6], [2, 1, 5, 7], [2, 1, 5, 8], [2, 1, 5, 9], [2, 1, 6, 5], [2, 1, 6, 6], [2, 1, 6, 7], [2, 1, 6, 8], [2, 1, 6, 9], [2, 1, 7, 5], [2, 1, 7, 6], [2, 1, 7, 7], [2, 1, 7, 8], [2, 1, 7, 9], [2, 1, 8, 5], [2, 1, 8, 6], [2, 1, 8, 7], [2, 1, 8, 8], [2, 1, 8, 9], [2, 1, 9, 5], [2, 1, 9, 6], [2, 1, 9, 7], [2, 1, 9, 8], [2, 1, 9, 9], [2, 2, 5, 5], [2, 2, 5, 6], [2, 2, 5, 7], [2, 2, 5, 8], [2, 2, 5, 9], [2, 2, 6, 5], [2, 2, 6, 6], [2, 2, 6, 7], [2, 2, 6, 8], [2, 2, 6, 9], [2, 2, 7, 5], [2, 2, 7, 6], [2, 2, 7, 7], [2, 2, 7, 8], [2, 2, 7, 9], [2, 2, 8, 5], [2, 2, 8, 6], [2, 2, 8, 7], [2, 2, 8, 8], [2, 2, 8, 9], [2, 2, 9, 5], [2, 2, 9, 6], [2, 2, 9, 7], [2, 2, 9, 8], [2, 2, 9, 9], [2, 3, 5, 5], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 5, 9], [2, 3, 6, 5], [2, 3, 6, 6], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 6, 9], [2, 3, 7, 5], [2, 3, 7, 6], [2, 3, 7, 7], [2, 3, 7, 8], [2, 3, 7, 9], [2, 3, 8, 5], [2, 3, 8, 6], [2, 3, 8, 7], [2, 3, 8, 8], [2, 3, 8, 9], [2, 3, 9, 5], [2, 3, 9, 6], [2, 3, 9, 7], [2, 3, 9, 8], [2, 3, 9, 9], [2, 4, 5, 5], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 5, 9], [2, 4, 6, 5], [2, 4, 6, 6], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 6, 9], [2, 4, 7, 5], [2, 4, 7, 6], [2, 4, 7, 7], [2, 4, 7, 8], [2, 4, 7, 9], [2, 4, 8, 5], [2, 4, 8, 6], [2, 4, 8, 7], [2, 4, 8, 8], [2, 4, 8, 9], [2, 4, 9, 5], [2, 4, 9, 6], [2, 4, 9, 7], [2, 4, 9, 8], [2, 4, 9, 9], [3, 0, 5, 5], [3, 0, 5, 6], [3, 0, 5, 7], [3, 0, 5, 8], [3, 0, 5, 9], [3, 0, 6, 5], [3, 0, 6, 6], [3, 0, 6, 7], [3, 0, 6, 8], [3, 0, 6, 9], [3, 0, 7, 5], [3, 0, 7, 6], [3, 0, 7, 7], [3, 0, 7, 8], [3, 0, 7, 9], [3, 0, 8, 5], [3, 0, 8, 6], [3, 0, 8, 7], [3, 0, 8, 8], [3, 0, 8, 9], [3, 0, 9, 5], [3, 0, 9, 6], [3, 0, 9, 7], [3, 0, 9, 8], [3, 0, 9, 9], [3, 1, 5, 5], [3, 1, 5, 6], [3, 1, 5, 7], [3, 1, 5, 8], [3, 1, 5, 9], [3, 1, 6, 5], [3, 1, 6, 6], [3, 1, 6, 7], [3, 1, 6, 8], [3, 1, 6, 9], [3, 1, 7, 5], [3, 1, 7, 6], [3, 1, 7, 7], [3, 1, 7, 8], [3, 1, 7, 9], [3, 1, 8, 5], [3, 1, 8, 6], [3, 1, 8, 7], [3, 1, 8, 8], [3, 1, 8, 9], [3, 1, 9, 5], [3, 1, 9, 6], [3, 1, 9, 7], [3, 1, 9, 8], [3, 1, 9, 9], [3, 2, 5, 5], [3, 2, 5, 6], [3, 2, 5, 7], [3, 2, 5, 8], [3, 2, 5, 9], [3, 2, 6, 5], [3, 2, 6, 6], [3, 2, 6, 7], [3, 2, 6, 8], [3, 2, 6, 9], [3, 2, 7, 5], [3, 2, 7, 6], [3, 2, 7, 7], [3, 2, 7, 8], [3, 2, 7, 9], [3, 2, 8, 5], [3, 2, 8, 6], [3, 2, 8, 7], [3, 2, 8, 8], [3, 2, 8, 9], [3, 2, 9, 5], [3, 2, 9, 6], [3, 2, 9, 7], [3, 2, 9, 8], [3, 2, 9, 9], [3, 3, 5, 5], [3, 3, 5, 6], [3, 3, 5, 7], [3, 3, 5, 8], [3, 3, 5, 9], [3, 3, 6, 5], [3, 3, 6, 6], [3, 3, 6, 7], [3, 3, 6, 8], [3, 3, 6, 9], [3, 3, 7, 5], [3, 3, 7, 6], [3, 3, 7, 7], [3, 3, 7, 8], [3, 3, 7, 9], [3, 3, 8, 5], [3, 3, 8, 6], [3, 3, 8, 7], [3, 3, 8, 8], [3, 3, 8, 9], [3, 3, 9, 5], [3, 3, 9, 6], [3, 3, 9, 7], [3, 3, 9, 8], [3, 3, 9, 9], [3, 4, 5, 5], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 5, 9], [3, 4, 6, 5], [3, 4, 6, 6], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 6, 9], [3, 4, 7, 5], [3, 4, 7, 6], [3, 4, 7, 7], [3, 4, 7, 8], [3, 4, 7, 9], [3, 4, 8, 5], [3, 4, 8, 6], [3, 4, 8, 7], [3, 4, 8, 8], [3, 4, 8, 9], [3, 4, 9, 5], [3, 4, 9, 6], [3, 4, 9, 7], [3, 4, 9, 8], [3, 4, 9, 9], [4, 0, 5, 5], [4, 0, 5, 6], [4, 0, 5, 7], [4, 0, 5, 8], [4, 0, 5, 9], [4, 0, 6, 5], [4, 0, 6, 6], [4, 0, 6, 7], [4, 0, 6, 8], [4, 0, 6, 9], [4, 0, 7, 5], [4, 0, 7, 6], [4, 0, 7, 7], [4, 0, 7, 8], [4, 0, 7, 9], [4, 0, 8, 5], [4, 0, 8, 6], [4, 0, 8, 7], [4, 0, 8, 8], [4, 0, 8, 9], [4, 0, 9, 5], [4, 0, 9, 6], [4, 0, 9, 7], [4, 0, 9, 8], [4, 0, 9, 9], [4, 1, 5, 5], [4, 1, 5, 6], [4, 1, 5, 7], [4, 1, 5, 8], [4, 1, 5, 9], [4, 1, 6, 5], [4, 1, 6, 6], [4, 1, 6, 7], [4, 1, 6, 8], [4, 1, 6, 9], [4, 1, 7, 5], [4, 1, 7, 6], [4, 1, 7, 7], [4, 1, 7, 8], [4, 1, 7, 9], [4, 1, 8, 5], [4, 1, 8, 6], [4, 1, 8, 7], [4, 1, 8, 8], [4, 1, 8, 9], [4, 1, 9, 5], [4, 1, 9, 6], [4, 1, 9, 7], [4, 1, 9, 8], [4, 1, 9, 9], [4, 2, 5, 5], [4, 2, 5, 6], [4, 2, 5, 7], [4, 2, 5, 8], [4, 2, 5, 9], [4, 2, 6, 5], [4, 2, 6, 6], [4, 2, 6, 7], [4, 2, 6, 8], [4, 2, 6, 9], [4, 2, 7, 5], [4, 2, 7, 6], [4, 2, 7, 7], [4, 2, 7, 8], [4, 2, 7, 9], [4, 2, 8, 5], [4, 2, 8, 6], [4, 2, 8, 7], [4, 2, 8, 8], [4, 2, 8, 9], [4, 2, 9, 5], [4, 2, 9, 6], [4, 2, 9, 7], [4, 2, 9, 8], [4, 2, 9, 9], [4, 3, 5, 5], [4, 3, 5, 6], [4, 3, 5, 7], [4, 3, 5, 8], [4, 3, 5, 9], [4, 3, 6, 5], [4, 3, 6, 6], [4, 3, 6, 7], [4, 3, 6, 8], [4, 3, 6, 9], [4, 3, 7, 5], [4, 3, 7, 6], [4, 3, 7, 7], [4, 3, 7, 8], [4, 3, 7, 9], [4, 3, 8, 5], [4, 3, 8, 6], [4, 3, 8, 7], [4, 3, 8, 8], [4, 3, 8, 9], [4, 3, 9, 5], [4, 3, 9, 6], [4, 3, 9, 7], [4, 3, 9, 8], [4, 3, 9, 9], [4, 4, 5, 5], [4, 4, 5, 6], [4, 4, 5, 7], [4, 4, 5, 8], [4, 4, 5, 9], [4, 4, 6, 5], [4, 4, 6, 6], [4, 4, 6, 7], [4, 4, 6, 8], [4, 4, 6, 9], [4, 4, 7, 5], [4, 4, 7, 6], [4, 4, 7, 7], [4, 4, 7, 8], [4, 4, 7, 9], [4, 4, 8, 5], [4, 4, 8, 6], [4, 4, 8, 7], [4, 4, 8, 8], [4, 4, 8, 9], [4, 4, 9, 5], [4, 4, 9, 6], [4, 4, 9, 7], [4, 4, 9, 8], [4, 4, 9, 9]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)

# s = "odaxusaweuasuoeudxwa"
# queries = [[0,5,10,14]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)

# s = "bdecebdece"
# queries = [[1,3,7,7]]
# ans = Solution().canMakePalindromeQueries(s, queries)
# print(ans)

s = "bbccbb"
queries = [[0,1,4,5]]
ans = Solution().canMakePalindromeQueries(s, queries)
print(ans)

