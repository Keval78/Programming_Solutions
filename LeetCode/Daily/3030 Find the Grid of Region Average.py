'''
###### * User Profile : Keval_78 
LinkedIn: https://www.linkedin.com/in/kevalpadsala78/
Github: https://github.com/Keval78
Leetcode: https://leetcode.com/Keval_78/
'''

from typing import List

class Solution:
    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:
        n, m = len(image), len(image[0])

        regions = [[[0]*2 for j in range(m)] for i in range(n)]

        def verifyRegion(i, j):
            if i+2>=n or j+2>=m: return False
            
            regionsum = 0
            #region [i..i+2][j..j+2]
            for l in range(i, i+3):
                for k in range(j, j+3):
                    if k!=j and abs(image[l][k] - image[l][k-1]) > threshold: return False
                    if l!=i and abs(image[l][k] - image[l-1][k]) > threshold: return False
                    regionsum += image[l][k]
            
            for l in range(i, i+3):
                for k in range(j, j+3):
                    regions[l][k][0] += (regionsum//9)
                    regions[l][k][1] += 1
            return True
        
        for i in range(n):
            for j in range(m):
                verifyRegion(i, j)

        # print(n*m, regions)

        for i in range(n):
            for j in range(m):
                if regions[i][j][1] > 0:
                    image[i][j] = regions[i][j][0] // regions[i][j][1]
        
        return image


image = [[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[3,3,3,3,3,3,3,10,3,3,11,3,13,3,5,12,3,3,3,9,3,15,3,3,3],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[8,8,8,8,8,8,8,15,8,8,16,8,18,8,10,17,8,8,8,14,8,20,8,8,8],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[5,5,5,5,5,5,5,12,5,5,13,5,15,5,7,14,5,5,5,11,5,17,5,5,5],[9,9,9,9,9,9,9,16,9,9,17,9,19,9,11,18,9,9,9,15,9,21,9,9,9],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[6,6,6,6,6,6,6,13,6,6,14,6,16,6,8,15,6,6,6,12,6,18,6,6,6],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[10,10,10,10,10,10,10,17,10,10,18,10,20,10,12,19,10,10,10,16,10,22,10,10,10],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[0,0,0,0,0,0,0,7,0,0,8,0,10,0,2,9,0,0,0,6,0,12,0,0,0],[7,7,7,7,7,7,7,14,7,7,15,7,17,7,9,16,7,7,7,13,7,19,7,7,7]]
threshold = 23

ans = Solution().resultGrid(image, threshold)
print(ans)
